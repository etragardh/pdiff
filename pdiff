#!/usr/bin/env python3

import argparse, os, subprocess, shutil
import sys


##
# Arguments

parser = argparse.ArgumentParser(
    prog='Patch Differ',
    description='Utility to diffcheck 2 software versions - ie patch diffing',
    epilog="Dont hack shit without permission! =)"
)
parser.add_argument(
    '-k', '--keep',
    action='store_true',
    help='Keep untouched files in diff/patch, default only keep modified and added'
) 
parser.add_argument(
    '--version',
    action='store_true',
    help='Display version'
) 
parser.add_argument(
    'pos', nargs='*'
)
args = parser.parse_args()

realpath = os.path.dirname(os.path.realpath(__file__))

print()
with open(realpath + '/assets/logo.ascii', 'r') as f:
    print(f.read())

##
# Version

if args.version:
    print("Version: 0.1")
    exit()

##
# Conditions

if len(args.pos) < 2:              
    print("Usage:")
    print("~# pdiff ~/path/to/org ~/path/to/patch")
    print()
    exit()

if not os.path.exists(args.pos[0]):
    print("Original does not exists: ", args.pos[0])
    exit()

if not os.path.exists(args.pos[1]):
    print("Patch does not exists: ", args.pos[1])
    exit()

if os.path.exists('diff'):
    #print("Path: ./diff already exists. Please remove it")
    shutil.rmtree('diff') # FIXME: Only for dev/debug
    #exit()

# Constants
original_path = os.path.abspath(args.pos[0])
patch_path = os.path.abspath(args.pos[1])

##
# Diff check
#
# Folders:
# - diff/
# | - mix/          (old ver of modified files + added)
# | - patch/        (all new files, git repo 2 commits)
#
os.mkdir('diff')
os.mkdir('diff/patch')
os.chdir('diff/patch')

# Init patch repo
os.system('git init >/dev/null 2>&1')

# Copy all files from original ver to patch repo
os.system("cp -a " + original_path + "/* .")
os.system("git add . >/dev/null 2>&1")
os.system("git commit -m 'original' >/dev/null 2>&1")
# Remove them again
os.system("rm -rf *")

# Add the patch version to patch repo
os.system("cp -a " + patch_path + "/* .")
os.system("git add . >/dev/null 2>&1")
os.system("git commit -m 'patch' >/dev/null 2>&1")

# Get the 2 commit IDS
commit1 = os.popen("git log | grep commit | cut -d ' ' -f 2 | sed '1p;d'").read()
commit2 = os.popen("git log | grep commit | cut -d ' ' -f 2 | sed '2p;d'").read()

# Get the files that were modifed and/or added
files = os.popen("git diff --name-only " + commit2.rstrip() + " " + commit1.rstrip()).read()

# Create the mix directory
total = 0
added = 0
for file in files.split():
    total += 1
    #print("File:",file)
    src_fpath = original_path + "/" + file
    dest_fpath = "../mix/" + file
    if not os.path.exists(src_fpath):
        added += 1
        # file was added, not modified
        src_fpath = patch_path + "/" + file
        dest_fpath = "../mix/" + os.path.dirname(file) +"/__a_"+ os.path.basename(file)

    os.makedirs(os.path.dirname(dest_fpath), exist_ok=True)
    shutil.copy(src_fpath, dest_fpath)

if not args.keep:
    # Delete not modified nor newly added files from diff/patch
    for root, dirs, files in os.walk("."):
        if root.startswith('./.git'):
            # Dont delete git files
            continue
        for filename in files:
            # If file is not present in diff/mix, delete it
            filepath = os.path.join(root, filename).strip('./')
            print("file:",filepath)
            if not os.path.exists('../mix/' + filepath) and not os.path.exists("../mix" + os.path.dirname(filepath) +"/__a_"+ os.path.basename(filepath)):
               os.remove(filepath) 
    #    for dirname in dirs:
    #        print("dir:",os.path.join(root, dirname))

print("------------------------------")
print("- Total:", total)
print("- Modified:", total-added)
print("- Added:", added)
print("------------------------------")
print("- Modified and added saved to")
print("- diff/mix/")
print("-  -> modified files are stored in original version")
print("-  -> added files are stored as __a_FILENAME.php")
print("------------------------------")
print("- Git repo of both versions")
print("- diff/patch/")
print("-  -> all files from patched is stored here")
print("-  -> each version is its own git commit")
